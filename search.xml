<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解读LiveClip:基于RDL的一种自适应短视频流策略</title>
      <link href="/posts/42132.html"/>
      <url>/posts/42132.html</url>
      
        <content type="html"><![CDATA[<h1 id="LiveClip-Towards-Intelligent-Mobile-Short-Form-Video-Streaming-with-Deep-Reinforcement-Learning"><a href="#LiveClip-Towards-Intelligent-Mobile-Short-Form-Video-Streaming-with-Deep-Reinforcement-Learning" class="headerlink" title="LiveClip: Towards Intelligent Mobile Short-Form Video Streaming with Deep Reinforcement Learning"></a>LiveClip: Towards Intelligent Mobile Short-Form Video Streaming with Deep Reinforcement Learning</h1><p><em><strong>NOSSDAV ‘20 ccf b</strong></em></p><h1 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h1><p>实测研究表明，抖音采用了一种相当简单的基于HTTP渐进式下载的策略（称为Next-One策略），该策略使用带有停止等待协议的滑动窗口。当网络连接较慢且用户滚动较快时，这种策略效果不佳。结果激励我们为移动短视频设计智能自适应流媒体方案。</p><p>由于不可预测的网络条件和频繁的用户交互事件（例如不耐烦的滚动和提前退出），满足短视频应用程序的用户体验质量（QoE）具有挑战性。</p><p>然而，最近的 深度强化学习 相关工作旨在研究传统长视频的比特率选择，而不是移动短视频，因为移动短视频是播放列表驱动的，通常具有恒定的比特率。</p><h2 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h2><p>尽管做了上述工作，短视频服务仍然面临挑战：</p><p>缓存决策具有级联效应。也就是说，流畅播放需要足够的预取数据，这会<strong>抢占其他视频的缓存</strong>，导致日后卡顿。无线移动<strong>网络连接动态变化</strong>。</p><p>而大多数短视频服务平台（例如抖音）都试探性地采用了 <strong>HTTP 渐进式下载策略</strong>，因此<strong>流媒体不是码率自适应的</strong>，因此<strong>更容易受到网络动态的影响</strong>。最后但并非最不重要的一点是，用户可以在很短的时间内轻松生成大量滚动事件，这可能会<strong>导致极高的缓存未命中率</strong>。</p><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>提出了一种名为 LiveClip 的自适应流媒体策略，它基于强化学习框架。所提出的方法可以以较低的使用成本开销（缓冲了但由滚动事件而从未被观看的内容）带来更好的 QoE（重新缓冲次数较少）。</p><h2 id="抖音的测量研究"><a href="#抖音的测量研究" class="headerlink" title="抖音的测量研究"></a>抖音的测量研究</h2><p>我们首先对中国流行的短视频移动应用程序抖音进行了系统的测量研究。测量结果表明，抖音采用的简单的next-one策略导致了用户观看体验的下降和额外的资源使用成本。</p><h3 id="研究结果"><a href="#研究结果" class="headerlink" title="研究结果"></a>研究结果</h3><p>抖音则采用<strong>渐进式下载</strong>。它也基于 HTTP，但 CDN 托管完整的视频文件。（通过抓包获得连续视频的传输时间线）播放器总是下载当前视频。完成后，播放器开始下载下一个视频文件。当有滚动事件时，先前的连接会立即关闭。我们将这种固定的流方案称为 Next-One 策略。</p><hr><p>较长的延迟和更快的网络速度会减少重新缓冲事件的数量。总浪费成本定义为<strong>下降量</strong>与<strong>部分中绿点数量的差值</strong>，如果差值为负则为 0。（即释放的量表示该视频的下载量，绿点个数表示用户观看的量）</p><p><img src="/img/Untitled-16969233990681.png" alt="Untitled"></p><p>例如，播放器在第一段中仅获得了4秒（4个绿点，绿点表示平滑播放）的流畅播放，之后的下降从4.27下降到0，因此<strong>间断时间为6秒</strong>（10-4），<strong>浪费时间为0.27秒。</strong></p><hr><p>通过使用 Appium [1]，我们可以模拟真实用户的滚动行为。我们观察到超过一半的视频 (68.6%) 不超过 15 秒，平均视频比特率为1190 Kbps。</p><p>结果显示，33%的<strong>推荐视频</strong>是在一天内发布的，72%是在一周内发布的，96%是在一个月内发布的。推荐系统倾向于推荐最近的视频（前10天左右）。</p><h2 id="LiveClip"><a href="#LiveClip" class="headerlink" title="LiveClip"></a>LiveClip</h2><p>使用深度强化学习（DRL）方法提出了一种称为 LiveClip 的自适应短视频流策略。 LiveClip网络合并<strong>下载速度</strong>和<strong>用户交互</strong>等外部因素，以及考虑了<strong>播放列表</strong>中视频的信息。<strong>不同网络场景</strong>下对应有不同的神经网络模型。</p><hr><p>T 表示观看会话的总时长。</p><p> bt ：时间 t 时的下载速度、 ct ：时间 t 时的用户交互、 dt ：时间 t 时的玩家状态。</p><p>Tslot: 选择在每个时间段下载播放列表中的哪些视频。将时隙Tslot和视频段设置为<strong>1秒为单位</strong></p><p>在每个时间步，决策者（player）选择一个动作 a，在给定转移概率 Pa(s, s ‘) 的情况下从状态 s 转移到新的状态 s ‘，并获得相应的奖励 Ra(s, s ‘)。</p><p>令 S &#x3D; {s1, s2, . 。 。 , sT } 表示<strong>状态空间</strong>。 T 是观看会话的总时长。 <strong>st &#x3D; (bt ,ct ,dt )。</strong></p><p>设 vt 表示时间 t 时播放器窗口所在的视频。</p><p>Bvt ：时间 t 时视口中视频的缓冲内容、 Qvt ：播放进度、 Mvt 表示：视频长度。仅当<strong>当前片段完全下载后，播放器才开始播放</strong>。</p><hr><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>我们假设视频<strong>以恒定的比特率进行编码</strong>，以便<strong>具有相同长度</strong>的每个片段具有<strong>相同的大小</strong>。</p><p>在每个时隙，播放器只能请求滑动窗口中的一个视频。当用户滚动屏幕时，滑走的视频内容将立即被驱逐。</p><p>⚠️（ddl）假设时隙为 1 秒，当下一个 1 秒片段尚未完全缓冲时，视频播放就会停止。</p><hr><h3 id="下载速度和用户交互学习"><a href="#下载速度和用户交互学习" class="headerlink" title="下载速度和用户交互学习"></a>下载速度和用户交互学习</h3><p>我们构建了一个一维 CNN 层，并将过去 k 秒的下载速度作为输入，学习<strong>下载速度的模式</strong>。</p><p>我们构建了另一个 1D-CNN 来学习用户行为模式。以过去k个视频的停留时间作为输入。它学习历史用户交互的模式，并希望它能够<strong>预测用户最有可能滚动屏幕的时间。</strong></p><h3 id="状态空间相关因素"><a href="#状态空间相关因素" class="headerlink" title="状态空间相关因素"></a>状态空间相关因素</h3><ul><li>过去k 秒的下载速度测量。—提供下载速度历史信息</li><li>过去k个视频的用户停留时间。—提供用户行为历史信息</li><li>播放进度。—播放器当前的播放状态</li><li>当前停留时间。</li><li>重播回合。</li><li>滑动窗口中视频的比特率。—滑动窗口中<strong>正在观看</strong>或接下来几秒<strong>将观看的视频</strong>相关</li><li>滑动窗口中视频的长度。</li><li>滑动窗口中的视频缓冲内容。</li><li>下载滑动窗口中视频所花费的时间。</li><li>滑动窗口中已完成的视频。</li></ul><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><p>设 A &#x3D; {a1, a2, …, aT } 表示动作空间。给定一个状态，代理需要采取操作 at &#x3D; (E ft , Edt )，其中 E ft 是要获取的视频集，而 Edt 是要在时间 t 从缓冲区中逐出的视频集。</p><p>在每个时间段，播放器需要确定应该下载滑动窗口中的哪些视频。（<strong>即预取工作是由播放器来做的</strong>）时隙被定义为最小时间单位，其专用于一次视频传输。玩家还可以决定在任何时间段停止下载。</p><p><img src="/img/Untitled1.png" alt="Untitled"></p><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p><img src="/img/Untitled2.png" alt="Untitled"></p><h3 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h3><p>决策者在状态 st 采取行动，并转移到另一个状态 st+1，产生奖励 rt 。我们将此处的奖励视为优化问题中的损失函数，其中包括 QoE 和浪费成本。</p><hr><p>我们将时间 t 的 用户质量（QoE） 定义为重新缓冲事件 et ∈ {0, 1} ，它指示当前视频 vt 是否由于时间 t 的缓存未命中而停止播放。</p><p>仅当当前视频 Bvt（时间 t 时视频的<strong>缓冲内容</strong>&#x2F;缓冲区） <strong>比播放进度</strong>Qvt<strong>超前</strong>一段(Tslot)或已<strong>达到总长度</strong>Mvt时，播放器<strong>才开始播放</strong>当前视频vt。</p><blockquote><p>作者将重新缓冲事件作为qoe评价指标，不考虑视频质量，因为抖音采用了渐进式下载策略，视频质量是在生成播放列表时确定的，因此在播放视频时，视频质量保持不变。</p></blockquote><hr><p>成本开销 → 缓冲了但由滚动事件而从未被观看的内容。将时间 t 的成本表示为 wt ，我们有：</p><p><img src="/img/Untitled3.png" alt="Untitled"></p><p>即被驱逐的所有视频的缓冲大小减去播放进度大小的和。<strong>成本是由滚动事件生成的</strong>，指示被逐出的视频中有多少片段尚未观看。</p><hr><p>损失函数LOSS（结合 QoE（重新缓冲） 和成本，得到 t 时刻的最终损失函数）：</p><p><img src="/img/Untitled4.png" alt="Untitled"></p><p>η 是一个超参数。它衡量成本的重要性，使用蜂窝网络时成本应较大，而使用 Wi-Fi 时成本应较小。</p><hr><p>我们的目标是找到一个策略 π(a|s) 来<strong>最小化</strong>会话中的<strong>总损失函数</strong>。 π(a|s) ：在给定当前状态的情况下选择某个动作的概率。优化问题正式定义为：</p><p><img src="/img/Untitled5.png" alt="Untitled"></p><h3 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h3><p><img src="/img/Untitled6.png" alt="Untitled"></p><p>中央管理器维护两个通用模型。他们接受超参数不同的奖励函数的训练。其中一种是针对Wi-Fi场景，另一种是针对蜂窝网络。移动设备定期从中央管理器获取这两个模型，并根据当前的网络连接实时确定哪个模型生成策略。当用户观视频时，<strong>传感器进程</strong>会<strong>持续监控</strong>下载速度、用户输入和播放器统计数据。收集器收集会话中的痕迹，分析器充当网络中的工作人员。</p><p>actor network：动作决策，选择下载当前视频，还是下一个视频，还是下下个视频</p><p>critic network：LOSS值</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>跟踪驱动的实验结果证明，LiveClip 在各种场景下的性能比现有最先进的方法高出约 10%-40%。</p><hr><p>真实的短视频数据集（即抖音数据集）；</p><p>随机选择视频，在每个观看会话中形成一个完整的播放列表；</p><p>对于网络追踪数据，我们使用由[10]生成的数据集；</p><p>由于很难获取到大规模的真实用户滚动行为追踪数据，我们假设滚动事件之间的时间间隔服从高斯分布；</p><p>⚠️对于每个会话，我们随机生成一个列表，其中包含<strong>完整的视频播放列表</strong>，下载速度跟踪和模拟用户跟踪。我们的模拟器能够在代理采取行动时<strong>立即计算QoE和成本</strong>。</p><hr><p>我们将 LiveClip 与以下基准算法进行比较，每个算法代表一种流媒体策略。</p><p>(1)最优。考虑到当前的下载速度和视频在视口中的用户停留时间，最优方法是<strong>玩家获得最多奖励的最佳策略</strong>。它被视为上限。</p><p>(2）Next-One，抖音应用采用。有一个带有停止等待协议的滑动窗口来指示要请求哪些视频。在当前视频完成传送之前，播放器不会下载下一个视频。并且它将保持空闲状态，直到新视频进入视口。</p><p>(3) Waterfall，这是Next-One策略的延伸，只不过它能够看到接下来的2个视频。</p><p>(4) Buffer-Based (BB)，它更喜欢<strong>在滑动窗口中预取多个视频</strong>。它的灵感来自仅使用缓冲区来确定视频比特率的想法[9]。这里它选择滑动窗口中某个视频文件的字节范围。</p><p>(5)随机，随机选择一个动作。此方法提供 QoE 的下限。</p><blockquote><p>buffer-based侧重于资源的有限使用，而Waterfall方法更看重 <strong>播放的流畅度</strong>而不是资源的过度使用。因为WIFI不限制流量，而运营商的网络（蜂窝网络）限制流量。WIF使用的是非授权频谱，只要满足无委会的要求，任何个人都可以自由使用。</p></blockquote><hr><p>我们根据不同的下载速度模式将测试集的下载速度轨迹分为快速（&gt;1700 Kbps）、中速（1100-1700 Kbps）和慢速（&lt;1100 Kbps）组，我们模拟具有适度用户行为模式的 Wi-Fi 网络</p><p><img src="/img/Untitled7.png" alt="Untitled"></p><hr><p>不同的用户行为模式。我们假设会话中滚动事件之间的间隔遵循高斯分布。我们将不同的用户行为模式分为 3 类：频繁（µ&#x3D;6，σ&#x3D;3）、中等（µ&#x3D;12，σ&#x3D;6）和耐心（µ &#x3D;18，σ&#x3D;9）。评估是在中等下载速度的Wi-Fi网络模拟中进行的。</p><hr><p>我们考虑三种不同的网络连接场景： (1)Vanilla-WiFi，其中损失函数中 η &#x3D; 0.1。 (2) Vanilla-Cellular，其中损失函数中 η &#x3D; 1。 (3) 交替，接入点每 30 秒更换为另一个。</p><p>Waterfall方法在 Wi-Fi 情况下比 buffer-based 表现更好，而在蜂窝情况下反之亦然。因为在蜂窝的资源比较有限。</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短视频自适应预取 </tag>
            
            <tag> 预取算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ALFIE:一种基于DRL的新型短视频自适应预取算法</title>
      <link href="/posts/28973.html"/>
      <url>/posts/28973.html</url>
      
        <content type="html"><![CDATA[<h1 id="ALFIE-NEURAL-REINFORCED-ADAPTIVE-PREFETCHING-FOR-SHORT-VIDEOS"><a href="#ALFIE-NEURAL-REINFORCED-ADAPTIVE-PREFETCHING-FOR-SHORT-VIDEOS" class="headerlink" title="ALFIE: NEURAL-REINFORCED ADAPTIVE PREFETCHING FOR SHORT VIDEOS"></a>ALFIE: NEURAL-REINFORCED ADAPTIVE PREFETCHING FOR SHORT VIDEOS</h1><p>ICME：CCF B会议</p><p>关键词：短视频<strong>自适应预取</strong></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>为了提供流畅的播放并避免重新缓冲延迟，通常使用预取即将播放的视频。而当前的预取设计在处理带宽开销方面存在不足，用户可能退出而不是继续观看已预取下载的块，由此导致带宽浪费。</p><p>目前的简单策略是，预取固定数量的视频以及每个视频的前几个块。</p><h3 id="目前预取策略"><a href="#目前预取策略" class="headerlink" title="目前预取策略"></a>目前预取策略</h3><p>通常遵循简单的静态策略：始终从推荐队列的顶部下载前 i 个视频，并且对于每个视频始终下载前 j 个块。预取是按顺序执行的。当前视频的下载优先级由播放器控制，与预取无关。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们将这一系列政策表示为 S-i-j。考虑此静态策略的两个实例：S-3-3 和 S-5-6。</p><p>作者使用模拟器重播静态预取策略，获得<strong>带宽开销</strong>（即<strong>总带宽消耗</strong>减去<strong>消耗</strong>的<strong>视频块</strong>的总大小）和<strong>退出开销</strong>（即由于退出而<strong>预取</strong>但<strong>未被观看</strong>的所有数据）。作者发现：</p><p>1、静态预取会导致大量带宽开销，包括退出开销。</p><p>2、大多数的会话消耗的视频不超过 60 个。近 52% 的会话观看的短视频不超过 6 个，意味着<strong>大量用户在观看几个视频后就离开了。</strong>在极端情况下，即 29% 的会话仅消耗一个视频，任何预取的数据都会被放弃。这种用户行为是退出开销的主要原因。</p><p>3、静态策略在不同环境中效果不佳。</p><p>4、当<strong>网络带宽较低</strong>和&#x2F;或<strong>用户倾向于快速滑动</strong>时，S-5-6 更好，因为它一次预取更多的块，重新缓冲时间和启动延迟相应变少。在其他场景中，S-3-3更好，因为它产生的带宽开销更少，但 QoE 非常相似。</p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>1、作者构建了 Alfie，一种基于DRL 的新型短视频<strong>自适应预取算法</strong>，来解决这一问题。Alfie根据<strong>网络</strong>条件和<strong>用户观看模式</strong>来调整预取，同时考虑减少带宽开销和退出开销。</p><blockquote><p>参考用户观看模式，随着用户观看更多视频，用户离开的可能性也不断增加，预取应该更加保守。如果用户的观看行为是基于历史数据的典型行为（通常只在离开之前观看几个视频），预取应该更加保守。如果用户行为是长尾状态，则可以更加积极地进行预取。</p></blockquote><blockquote><p>参考网络因素，如果网络条件可能恶化，可以选择更多地预取以应对带宽短缺。</p></blockquote><p>2、作者采用深度强化学习（DRL）进行预测。该DRL 模型利用一组有关用户行为（例如历史会话持续时间、过去视频的观看时间）、网络状况（例如最近的网络带宽）和即将播放的视频的特征作为环境状态，并<strong>学习</strong>优化策略<strong>QoE 增益</strong>和<strong>带宽开销</strong>的长期利益。</p><p>3、开发了一个<strong>短视频流模拟器</strong>来训练 Alfie。</p><h1 id="Alfie-的详细设计"><a href="#Alfie-的详细设计" class="headerlink" title="Alfie 的详细设计"></a>Alfie 的详细设计</h1><p>它由 RL 模块、慢启动机制、短视频流模拟器组成</p><h2 id="基于DRL-模拟预取"><a href="#基于DRL-模拟预取" class="headerlink" title="基于DRL 模拟预取"></a>基于DRL 模拟预取</h2><h3 id="状态空间"><a href="#状态空间" class="headerlink" title="状态空间"></a>状态空间</h3><p>在 Alfie 中，在给定步骤 i 处，状态空间 Si &#x3D; [Ui, Wi, Pi, Vi] 包含以下内容：</p><ul><li><strong>用户行为特征Ui</strong> &#x3D; [Fi, Ei]，<strong>Fi</strong> 表示过去 M 个视频中<strong>每个视频的观看时间</strong>，即 Fi &#x3D; [f0, f1,…  , fM ] 其中 f0 是用户在当前视频上花费的总时间。用户的退出行为<strong>Ei</strong>&#x3D; [e0, e−1, …, e−K] 描述了最近 K 个<strong>会话</strong>中（从用户进入到离开应用程序为一个会话）<strong>观看的视频数量</strong>，其中 e0 是当前会话中观看的视频数量。</li><li><strong>网络吞吐量Wi</strong> &#x3D; [n0, . 。 。 ,n1−L]，表示最近完成下载的L个块的平均下载吞吐量。</li><li><strong>播放信息Pi</strong> &#x3D; [Bi，gi]。<strong>Bi</strong> &#x3D; [b0,… 。 。 , bN ]，表示当前视频+推荐队列 中<strong>所有 N 个</strong>即将发布的视频的下载<strong>数据大小，</strong>其中b0是当前视频的下载大小，b1是队列顶部第一个视频的<strong>预取数据大小</strong>。gi 表示当前视频的播放进度。</li><li><strong>块信息Vi</strong> &#x3D; [v0,… 。 。 , vN−1]，表示<strong>所有 N 个</strong>即将发布的<strong>视频的候选块</strong>的<strong>大小</strong>，</li></ul><h3 id="行为空间"><a href="#行为空间" class="headerlink" title="行为空间"></a>行为空间</h3><p>由标量 Ai 表示，它取 0 到 N 之间的整数值。当 Ai &#x3D; 0 时，意味着 Alfie 选择不预取任何内容。当Ai &#x3D; x 时，Alfie 从推荐队列中预取<strong>第 x 个视频</strong>不在缓冲区中的下<strong>一个块。</strong></p><p>每当 Alfie 发现<strong>第一个即将播放的视频</strong>根<strong>本没有被预取</strong>时，它总是选择在这一步中预取它，即 Ai &#x3D; 1。</p><h3 id="奖励函数"><a href="#奖励函数" class="headerlink" title="奖励函数"></a>奖励函数</h3><p>奖励函数 R(Si, Ai, Si+1) 由两个方面组成，<strong>R</strong>idle代表没有任何动作时的奖励，<strong>R</strong>prefetch是发生预取的奖励。如下所示：</p><p><img src="/img/Untitled-16965945105294.png" alt="Untitled"></p><p>当RL代理选择<strong>R</strong>idle：</p><p><img src="/img/Untitled1-16965945105305.png" alt="Untitled"></p><p><strong>T</strong>idle 表示在从 Si 到 Si+1 的空闲期间当前视频的<strong>重新缓冲时间</strong>（当下一个要播放的块在播放时间之前没有下载时，就会发生重新缓冲，每次发生重新缓冲时，我们都会记录其持续时间）。</p><p>这里 α &gt; 0 是一个正的奖励系数，控制了QoE和带宽开销之间的权衡。如果α很大，代理倾向于更频繁地不做预取，因为即使经常发生重新缓冲事件，它仍然可以获得奖励；如果α接近0，则代理会更积极地进行预取。</p><p>当RL代理选择<strong>R</strong> prefetch ( S i , A i , S i +1 )：</p><blockquote><p><strong>输入</strong>：Ai：选择预取的视频； j：Ai中要预取的chunk的位置； T (Si, Ai, Si+1)：下载块 j 期间的重新缓冲时间</p></blockquote><blockquote><p>1、获取当前会话中剩余要播放的视频数量h。</p></blockquote><blockquote><p>2、如果T (Si, Ai, Si+1) &gt; 0，Rprefetch&#x3D;-1，表示惩罚；如果Ai &gt; h，Rprefetch&#x3D;-1，由于用户退出而不会观看视频，则对下载该视频进行惩罚。否则，根据历史记录获取用户花在视频Ai上的时间s。</p></blockquote><blockquote><p>3、如果j &gt; s，Rprefetch&#x3D;-1，块 j 的时间戳超出用户停留时间，则惩罚滑动开销。否则，Rprefetch &#x3D; β ∗ (s − j)&#x2F;s</p></blockquote><blockquote><p><strong>输出：</strong>Rprefetch</p></blockquote><h2 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h2><p>最初在观看会话开始时，窗口大小仅为一，这意味着 Alfie 仅预取一个视频。随着观看的视频数量增加 1 个，它会增加 1，直到达到 N（推荐队列大小）。</p><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>Alfie的模拟器工作如下：数据采样器加载会话数据和网络数据，并将所有用户滑动和退出事件注入事件队列。在流媒体传输期间，下载器使用来自采样器和RL模型的动作执行下载事件，包括当前视频的下载和预取即将到来的视频。<strong>虚拟播放器</strong>控制播放并记录重新缓冲和滑动事件。将性能指标（例如重新缓冲时间和开销）记录在日志中。</p><p>模拟器可以在仅<strong>8分钟内模拟244小时</strong>的<strong>短视频</strong>流媒体。</p><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>使用四个性能指标：两个用于QoE（用户体验质量）和两个用于带宽开销。（i）<strong>重新缓冲时间T</strong>，（ii）   <strong>启动延迟D</strong>：用户滑动事件和播放开始时间之间的延迟；（iii）<strong>滑动开销Ws</strong>（iv）<strong>退出开销We</strong>。</p><p>对于短视频的QoE并不需要考虑视频比特率，因为它们的比特率是在生成推荐队列时确定的。数据库中的所有短视频均采用可变比特率的 VBR 编码。</p><p>作者通过结合上述所有四个指标来考虑以下负效用，<strong>U 越小越好</strong>（毫秒为单位），因为指标都反映了负面影响：</p><p><img src="/img/Untitled2-16965945105306.png" alt="Untitled"></p><h1 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h1><p>将 Alfie 与最先进的预取方法进行比较：</p><p>1、Oracle：在已知用户未来信息（即用户滑动和退出时间）的理想情况下，<strong>按顺序下载块</strong>（baseline）;</p><p>2、Next-One（抖音采用）：它总是<strong>完整下载当前视频</strong>，然后开始完整下载下一个视频。然后它保持空闲状态（不再预取），直到发生滑动事件。</p><p>3、Static：简单的静态策略：始终从推荐队列的顶部下载前 i 个视频，并且对于每个视频始终下载前 j 个块。预取是按顺序执行的。当前视频的下载优先级由播放器控制，与预取无关。作者考虑了<strong>S-3-3 、 S-5-6 、S-5-12</strong>。</p><p>4、LiveClip：一种基于学习的短视频流预取算法。它从<strong>当前视频</strong>和<strong>接下来</strong>的<strong>两个即将播放的视频</strong>中选择块进行下载。</p><p>作者在低（平均 1.48Mbps）和高（平均 Mbps）带宽场景下进行了实验。实验结果表明：</p><ol><li><p>Alfie 提供了带宽高效的预取策略，有效降低了带宽开销尤其是出口开销。</p></li><li><p>Alfie 可以将吞吐量历史信息合并到其状态空间中，以针对近期网络特性进行优化。</p></li></ol><p>作者在用户短（平均 4.9 秒）和长（平均 45 秒）滑动间隔的场景下进行实验，并为这两种场景使用相同的网络轨迹，结果表明：</p><p>1、当用户执行快速滑动时，与最佳静态策略S-5-12相比，Alfie在重新缓冲时间上实现了13.3%的改进； </p><p>2、当用户执行快速滑动时，Next-One、S-3-3 和 LiveClip <strong>在 QoE 指标中表现不佳</strong>，因为它们都<strong>在固定的短范围内预取</strong>，无法很好地处理快速滑动事件。 LiveClip 性能不佳的另一个原因是<strong>它采用恒定比特率 (CBR) 编码</strong>，这使得它无法适应不同的块大小。</p><p>3、当滑动间隔较长时， Alfie 在重新缓冲时间方面比 Next-One 稍差，因为 <strong>Next-One 会以牺牲带宽为代价进行积极预取</strong>。</p><h1 id="Alfie-学到的规则"><a href="#Alfie-学到的规则" class="headerlink" title="Alfie 学到的规则"></a>Alfie 学到的规则</h1><ol><li><p>Alfie 倾向于<strong>在较低带宽网络中</strong>更<strong>积极地预取</strong>以避免重新缓冲，并在<strong>带宽较高时保守</strong>地预取。</p></li><li><p>在用户<strong>快速滑动场景中</strong>，Alfie <strong>优先选择</strong>每个视频的<strong>第一个块</strong>，然后再显示后续内容。</p></li><li><p>会议即将结束时趋于保守。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短视频自适应预取 </tag>
            
            <tag> 预取算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文技巧-python画图（2）</title>
      <link href="/posts/42704.html"/>
      <url>/posts/42704.html</url>
      
        <content type="html"><![CDATA[<h1 id="python画图2"><a href="#python画图2" class="headerlink" title="python画图2"></a>python画图2</h1><h1 id="多折线图"><a href="#多折线图" class="headerlink" title="多折线图"></a>多折线图</h1><p><img src="/img/Untitled-16960697271863.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">importmatplotlib.pyplotasplt</span><br><span class="line">importmatplotlib.font_managerasfont_manager</span><br><span class="line">importnumpyasnp</span><br><span class="line">importpandasaspd</span><br><span class="line">frommatplotlib.font_managerimportFontProperties</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment">#设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] =<span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]<span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] =<span class="literal">False</span><span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">if__name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))</span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">    x_data = [<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;40&#x27;</span>,<span class="string">&#x27;50&#x27;</span>,<span class="string">&#x27;60&#x27;</span>]</span><br><span class="line">    Y1= [<span class="number">2.3</span>,<span class="number">2</span>,<span class="number">2.4</span>,<span class="number">3</span>,<span class="number">3.5</span>,<span class="number">3</span>]</span><br><span class="line">    Y2= [<span class="number">2.3</span>,<span class="number">2</span>,<span class="number">2.5</span>,<span class="number">3</span>,<span class="number">2.8</span>,<span class="number">2.9</span>]</span><br><span class="line">    Y3= [<span class="number">3</span>,<span class="number">3.5</span>,<span class="number">3.6</span>,<span class="number">3.4</span>,<span class="number">3.8</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    line,=ax1.plot(x_data, Y1, color=<span class="string">&#x27;royalblue&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">             markeredgewidth=<span class="number">2</span>,label=<span class="string">&#x27;Y1&#x27;</span>)</span><br><span class="line">    line1,=ax1.plot(x_data, Y2, color=<span class="string">&#x27;darkorange&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">             markeredgewidth=<span class="number">2</span>,label=<span class="string">&#x27;Y2&#x27;</span>)</span><br><span class="line">    line2,=ax1.plot(x_data, Y3, color=<span class="string">&#x27;slategray&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">             markeredgewidth=<span class="number">2</span>,label=<span class="string">&#x27;Y3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;XXX&quot;</span>,fontsize=<span class="number">20</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>,fontsize=<span class="number">20</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调整刻度值的字号</span></span><br><span class="line">ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置y轴坐标值和间隔、显示范围</span></span><br><span class="line"><span class="comment"># y_ticks = np.arange(1.5, 3, 0.2)  #设置X轴坐标值为1到5，间隔为1</span></span><br><span class="line">    <span class="comment"># ax1.set_yticks(y_ticks)</span></span><br><span class="line">    <span class="comment"># ax1.set_ylim(1.5, 2.9)</span></span><br><span class="line">ax1.yaxis.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让左右边框值一致</span></span><br><span class="line">ax2 = ax1.twiny()</span><br><span class="line"><span class="comment">#隐藏刻度线值</span></span><br><span class="line">ax2.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, which=<span class="string">&#x27;both&#x27;</span>, colors=<span class="string">&#x27;white&#x27;</span>, labelsize=<span class="number">1</span>,bottom=<span class="literal">False</span>, top=<span class="literal">False</span>, left=<span class="literal">False</span>, right=<span class="literal">False</span>,labelbottom=<span class="literal">False</span>, labelleft=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并图例</span></span><br><span class="line">legend = [line,line1,line2]</span><br><span class="line">    labels = [l.get_label()forlinlegend]</span><br><span class="line">    legend = ax1.legend(legend, labels)<span class="comment">#bbox_to_anchor=(1, 1)</span></span><br><span class="line">    <span class="comment">#设置字体属性</span></span><br><span class="line">font_props = FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>,size=<span class="number">13</span>)</span><br><span class="line">fortextinlegend.get_texts():</span><br><span class="line">        text.set_font_properties(font_props)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出为PNG文件，分辨率设置为100像素,  bbox_inches=&#x27;tight&#x27;:去除坐标轴占用的空间   pad_inches=0:去除所有白边</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;pngs/pic16.png&#x27;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="折线图-柱状图-显示数据"><a href="#折线图-柱状图-显示数据" class="headerlink" title="折线图+柱状图+显示数据"></a>折线图+柱状图+显示数据</h1><p><img src="/img/Untitled1-16960697271851.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置图表的长和高</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))  <span class="comment"># 设置图表的宽度为8，高度为6</span></span><br><span class="line">    <span class="comment"># 创建轴</span></span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">    x_data = np.arange(<span class="number">3</span>)</span><br><span class="line">    tick_label = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">    y_data = [<span class="number">1.5</span>,<span class="number">2.5</span>,<span class="number">2.4</span>]</span><br><span class="line">    y_data1=[<span class="number">1.1</span>,<span class="number">1.4</span>,<span class="number">1.2</span>]</span><br><span class="line">    y_data2 = [<span class="number">0.8</span>,<span class="number">0.74</span>,<span class="number">0.7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第1个轴</span></span><br><span class="line">    bar = ax1.bar(x_data - <span class="number">0.1</span>, y_data, width=<span class="number">0.2</span>, color=<span class="string">&#x27;royalblue&#x27;</span>, label=<span class="string">&#x27;11&#x27;</span>, zorder=<span class="number">100</span>,</span><br><span class="line">                   hatch=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    bar1 = ax1.bar(x_data + <span class="number">0.1</span>, y_data1, width=<span class="number">0.2</span>, color=<span class="string">&#x27;orange&#x27;</span>, label=<span class="string">&#x27;22&#x27;</span>, zorder=<span class="number">100</span>,</span><br><span class="line">                   hatch=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置X刻度标签</span></span><br><span class="line">    ax1.set_xticks(x_data )</span><br><span class="line">    ax1.set_xticklabels(tick_label)</span><br><span class="line"></span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>,  direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0</span>, <span class="number">3.1</span>, <span class="number">0.5</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">    ax1.yaxis.grid(<span class="literal">True</span>, zorder=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第2个轴</span></span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    line,=ax2.plot(x_data, y_data2, color=<span class="string">&#x27;grey&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>, label=<span class="string">&quot;33&quot;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">             markeredgewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在每个点上显示数值</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data2):</span><br><span class="line">        ax2.annotate(<span class="string">f&#x27;<span class="subst">&#123;y&#125;</span>&#x27;</span>, (x, y-<span class="number">0.03</span>), textcoords=<span class="string">&quot;offset points&quot;</span>, xytext=(<span class="number">2</span>, <span class="number">17</span>), ha=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">17</span>,</span><br><span class="line">                     weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax2.set_ylabel(<span class="string">&quot;Y22&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax2.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line">    ax2.set_ylim([<span class="number">0</span>, <span class="number">0.9</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并图例</span></span><br><span class="line">    legend = [bar, bar1,line]</span><br><span class="line">    labels = [l.get_label() <span class="keyword">for</span> l <span class="keyword">in</span> legend]</span><br><span class="line">    legend=ax1.legend(legend, labels,bbox_to_anchor=(<span class="number">0.38</span>, <span class="number">0.67</span>))</span><br><span class="line">    <span class="comment"># 设置字体属性</span></span><br><span class="line">    font_props = FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>, size=<span class="number">17</span>)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> legend.get_texts():</span><br><span class="line">        text.set_font_properties(font_props)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出为PNG文件，分辨率设置为100像素,  bbox_inches=&#x27;tight&#x27;:去除坐标轴占用的空间   pad_inches=0:去除所有白边</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;pngs/pic13.png&quot;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="并排多柱状图"><a href="#并排多柱状图" class="headerlink" title="并排多柱状图"></a>并排多柱状图</h1><p><img src="/img/Untitled2-16960697271862.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置图表的长和高</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">7</span>, <span class="number">6</span>))  <span class="comment"># 设置图表的宽度为8，高度为6</span></span><br><span class="line">    <span class="comment"># 创建轴</span></span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">    x_data = np.arange(<span class="number">5</span>)</span><br><span class="line">    tick_label = [<span class="string">&#x27;2^14&#x27;</span>,<span class="string">&#x27;2^15&#x27;</span>,<span class="string">&#x27;2^16&#x27;</span>,<span class="string">&#x27;2^17&#x27;</span>,<span class="string">&#x27;2^18&#x27;</span>]</span><br><span class="line">    y_data = [<span class="number">0.81</span>,<span class="number">0.82</span>,<span class="number">0.83</span>,<span class="number">0.84</span>,<span class="number">0.85</span>]</span><br><span class="line">    y_data1=[<span class="number">0.7</span>,<span class="number">0.72</span>,<span class="number">0.74</span>,<span class="number">0.76</span>,<span class="number">0.78</span>]</span><br><span class="line">    y_data2 = [<span class="number">0.6</span>,<span class="number">0.64</span>,<span class="number">0.68</span>,<span class="number">0.72</span>,<span class="number">0.76</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第1个轴</span></span><br><span class="line">    bar = ax1.bar(x_data - <span class="number">0.2</span>, y_data, width=<span class="number">0.2</span>, color=<span class="string">&#x27;royalblue&#x27;</span>, label=<span class="string">&#x27;1&#x27;</span>, zorder=<span class="number">100</span>,</span><br><span class="line">                   hatch=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    bar1 = ax1.bar(x_data + <span class="number">0</span>, y_data1, width=<span class="number">0.2</span>, color=<span class="string">&#x27;orange&#x27;</span>, label=<span class="string">&#x27;2&#x27;</span>, zorder=<span class="number">100</span>,</span><br><span class="line">                   hatch=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    bar2 = ax1.bar(x_data + <span class="number">0.2</span>, y_data2, width=<span class="number">0.2</span>, color=<span class="string">&#x27;grey&#x27;</span>, label=<span class="string">&#x27;3&#x27;</span>, zorder=<span class="number">100</span>,</span><br><span class="line">                   hatch=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;XXX&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置X刻度标签</span></span><br><span class="line">    ax1.set_xticks(x_data )</span><br><span class="line">    ax1.set_xticklabels(tick_label)</span><br><span class="line"></span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>,  direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    y_ticks = np.arange(<span class="number">0.6</span>, <span class="number">0.91</span>, <span class="number">0.05</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">0.6</span>, <span class="number">0.9</span>])</span><br><span class="line">    ax1.yaxis.grid(<span class="literal">True</span>, zorder=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让左右边框值一致</span></span><br><span class="line">    ax2 = ax1.twiny()</span><br><span class="line">    <span class="comment"># 隐藏刻度线值</span></span><br><span class="line">    ax2.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, which=<span class="string">&#x27;both&#x27;</span>, colors=<span class="string">&#x27;white&#x27;</span>, labelsize=<span class="number">1</span>,bottom=<span class="literal">False</span>, top=<span class="literal">False</span>, left=<span class="literal">False</span>, right=<span class="literal">False</span>,labelbottom=<span class="literal">False</span>, labelleft=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并图例</span></span><br><span class="line">    legend = [bar, bar1,bar2]</span><br><span class="line">    labels = [l.get_label() <span class="keyword">for</span> l <span class="keyword">in</span> legend]</span><br><span class="line">    legend=ax1.legend(legend, labels,bbox_to_anchor=(<span class="number">0.82</span>, <span class="number">1</span>),ncol=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 设置字体属性</span></span><br><span class="line">    font_props = FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>, size=<span class="number">17</span>)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> legend.get_texts():</span><br><span class="line">        text.set_font_properties(font_props)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出为PNG文件，分辨率设置为100像素,  bbox_inches=&#x27;tight&#x27;:去除坐标轴占用的空间   pad_inches=0:去除所有白边</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;pngs/pic23.png&quot;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 论文技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文技巧-python画图（1）</title>
      <link href="/posts/58064.html"/>
      <url>/posts/58064.html</url>
      
        <content type="html"><![CDATA[<h1 id="python画图1"><a href="#python画图1" class="headerlink" title="python画图1"></a>python画图1</h1><h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><p><img src="/img/Untitled.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置图表的长和高</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">5</span>))  <span class="comment"># 设置图表的宽度为8，高度为6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建轴</span></span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line">    <span class="comment"># fig,ax1 = plt.subplots()</span></span><br><span class="line">    <span class="comment"># plt.rcParams[&#x27;axes.linewidth&#x27;] = 3</span></span><br><span class="line">    <span class="comment"># fig.subplots_adjust(left=0, bottom=0) #调整图的四周间距</span></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;right&#x27;].set_visible(False)  # 右边</span></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;top&#x27;].set_visible(False)  # 上边</span></span><br><span class="line"></span><br><span class="line">    x_data = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;150&#x27;</span>, <span class="string">&#x27;200&#x27;</span>, <span class="string">&#x27;250&#x27;</span>]</span><br><span class="line">    y_data =[<span class="number">0.7</span>,<span class="number">0.5</span>,<span class="number">0.6</span>,<span class="number">0.4</span>,<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.6</span>]</span><br><span class="line"></span><br><span class="line">    ax1.plot(x_data, y_data,  color=<span class="string">&#x27;royalblue&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>,markerfacecolor=<span class="string">&#x27;none&#x27;</span>,markeredgewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;XXX&quot;</span>,fontsize=<span class="number">20</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>,fontsize=<span class="number">20</span>,weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调整刻度值的字号</span></span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line">    <span class="comment"># 设置Y轴显示范围</span></span><br><span class="line">    ax1.set_ylim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    ax1.yaxis.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#让左右边框值一致</span></span><br><span class="line">    ax2 = ax1.twiny()</span><br><span class="line">    <span class="comment"># 隐藏刻度线值</span></span><br><span class="line">    ax2.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, which=<span class="string">&#x27;both&#x27;</span>, colors=<span class="string">&#x27;white&#x27;</span>, labelsize=<span class="number">1</span>,bottom=<span class="literal">False</span>, top=<span class="literal">False</span>, left=<span class="literal">False</span>, right=<span class="literal">False</span>,labelbottom=<span class="literal">False</span>, labelleft=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;right&#x27;].set_linewidth(1.5)</span></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;left&#x27;].set_lignewidth(1.5)</span></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;top&#x27;].set_linewidth(1.5)</span></span><br><span class="line">    <span class="comment"># ax1.spines[&#x27;bottom&#x27;].set_linewidth(1.5)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.legend(); #不需要图例时不调用</span></span><br><span class="line">    <span class="comment"># 导出为PNG文件，分辨率设置为100像素,  bbox_inches=&#x27;tight&#x27;:去除坐标轴占用的空间   pad_inches=0:去除所有白边</span></span><br><span class="line">    plt.savefig(<span class="string">&#x27;pngs/pic1.png&#x27;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><p><img src="/img/Untitled1.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># hatch_par = [&#x27;/&#x27;, &#x27;&#x27;, &#x27;|&#x27;, &#x27;-&#x27;, &#x27;+&#x27;, &#x27;x&#x27;, &#x27;o&#x27;, &#x27;O&#x27;, &#x27;.&#x27;, &#x27;*&#x27;]</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">    x_data = [<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;35&#x27;</span>,<span class="string">&#x27;40&#x27;</span>]</span><br><span class="line">    y_data =[<span class="number">0.04</span>,<span class="number">0.02</span>,<span class="number">0.03</span>,<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.04</span>,<span class="number">0.02</span>,<span class="number">0.05</span>]</span><br><span class="line">    y_data1 = [<span class="number">0.03</span>,<span class="number">0.03</span>,<span class="number">0.03</span>,<span class="number">0.06</span>,<span class="number">0.04</span>,<span class="number">0.06</span>,<span class="number">0.02</span>,<span class="number">0.02</span>]</span><br><span class="line"></span><br><span class="line">    F2 = ax1.bar(x_data, y_data1, color=<span class="string">&#x27;royalblue&#x27;</span>, width=<span class="number">0.5</span>,label=<span class="string">&#x27;---&#x27;</span>,zorder=<span class="number">100</span>,hatch=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    F1 = ax1.bar(x_data, y_data, color=<span class="string">&#x27;orange&#x27;</span>, width=<span class="number">0.5</span>, bottom=y_data1, label=<span class="string">&#x27;...&#x27;</span>,zorder=<span class="number">100</span>,hatch=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;XXX&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调整刻度值的字号</span></span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置Y轴显示范围</span></span><br><span class="line">    ax1.set_ylim(<span class="number">0</span>, <span class="number">0.12</span>)</span><br><span class="line">    ax1.yaxis.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让左右边框值一致</span></span><br><span class="line">    ax2 = ax1.twiny()</span><br><span class="line">    <span class="comment"># 隐藏刻度线值</span></span><br><span class="line">    ax2.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, which=<span class="string">&#x27;both&#x27;</span>, colors=<span class="string">&#x27;white&#x27;</span>, labelsize=<span class="number">1</span>, bottom=<span class="literal">False</span>, top=<span class="literal">False</span>, left=<span class="literal">False</span>,</span><br><span class="line">                    right=<span class="literal">False</span>, labelbottom=<span class="literal">False</span>, labelleft=<span class="literal">False</span>)</span><br><span class="line">    legend = [F1, F2]</span><br><span class="line">    labels = [l.get_label() <span class="keyword">for</span> l <span class="keyword">in</span> legend]</span><br><span class="line">    legend = ax1.legend(legend, labels, fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    plt.savefig(<span class="string">&#x27;pngs/pic7.png&#x27;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="折线-柱状图"><a href="#折线-柱状图" class="headerlink" title="折线+柱状图"></a>折线+柱状图</h1><p><img src="/img/Untitled2.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> font_manager</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体加粗</span></span><br><span class="line">font_props = font_manager.FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置黑体字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">plt.rcParams.update(&#123;<span class="string">&#x27;font.size&#x27;</span>: <span class="number">17</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置图表的长和高</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">5</span>))  <span class="comment"># 设置图表的宽度为8，高度为6</span></span><br><span class="line">    fig.set_size_inches(<span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 创建轴</span></span><br><span class="line">    ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line">    x_data = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;50&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;150&#x27;</span>,<span class="string">&#x27;200&#x27;</span>,<span class="string">&#x27;250&#x27;</span>,<span class="string">&#x27;300&#x27;</span>]</span><br><span class="line">    y_data = [<span class="number">8000000</span>,<span class="number">7000000</span>,<span class="number">6000000</span>,<span class="number">6000000</span>,<span class="number">3000000</span>,<span class="number">1000000</span>,<span class="number">600000</span>,<span class="number">300000</span>,<span class="number">100000</span>,<span class="number">100000</span>,<span class="number">100000</span>] <span class="comment">#Entry replacement count</span></span><br><span class="line">    <span class="comment"># x_data2 = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]</span></span><br><span class="line">    y_data2=[<span class="number">0.8</span>,<span class="number">0.5</span>,<span class="number">0.3</span>,<span class="number">0.8</span>,<span class="number">0.7</span>,<span class="number">0.4</span>,<span class="number">0.7</span>,<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>] <span class="comment">#Prediction ratio</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第1个轴</span></span><br><span class="line">    bar=ax1.bar(x_data, y_data, color=<span class="string">&#x27;royalblue&#x27;</span>, label=<span class="string">&quot;------&quot;</span>,zorder=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ax1.ticklabel_format(style=&#x27;sci&#x27;, axis=&#x27;y&#x27;, scilimits=(0, 0),useMathText=True)</span></span><br><span class="line">    <span class="comment"># 自定义y轴标签</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exp_formatter</span>(<span class="params">x, pos</span>):</span><br><span class="line">        <span class="comment"># print(x)</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0.0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;<span class="number">0</span>&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> x &lt; <span class="number">10000000</span>:</span><br><span class="line">            x = x / <span class="number">1000000</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>e6&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = x / <span class="number">10000000</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;x:<span class="number">.0</span>f&#125;</span>e7&#x27;</span></span><br><span class="line">    ax1.yaxis.set_major_formatter(ticker.FuncFormatter(exp_formatter))</span><br><span class="line"></span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;XXX&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;YYY&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.tick_params(axis=<span class="string">&#x27;x&#x27;</span>, labelsize=<span class="number">18</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">0</span>, <span class="number">10000000</span>])</span><br><span class="line">    ax1.yaxis.grid(<span class="literal">True</span>, zorder=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第2个轴</span></span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    line,=ax2.plot(x_data, y_data2, <span class="string">&#x27;gs-&#x27;</span>, label=<span class="string">&quot;......&quot;</span>, linewidth=<span class="number">2</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">             markeredgewidth=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># ax2.set_xlabel(&quot;Time window size(s)&quot;, fontsize=20, weight=&#x27;bold&#x27;)</span></span><br><span class="line">    ax2.set_ylabel(<span class="string">&quot;Y222&quot;</span>, fontsize=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    ax2.tick_params(axis=<span class="string">&#x27;y&#x27;</span>, direction=<span class="string">&#x27;in&#x27;</span>,labelsize=<span class="number">18</span>)</span><br><span class="line">    ax2.set_ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并图例</span></span><br><span class="line">    legend = [bar, line]</span><br><span class="line">    labels = [l.get_label() <span class="keyword">for</span> l <span class="keyword">in</span> legend]</span><br><span class="line">    legend=ax1.legend(legend, labels,bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 设置字体属性</span></span><br><span class="line">    font_props = FontProperties(weight=<span class="string">&#x27;bold&#x27;</span>, size=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> legend.get_texts():</span><br><span class="line">        text.set_font_properties(font_props)</span><br><span class="line"></span><br><span class="line">    plt.savefig(<span class="string">&quot;pngs/pic3.png&quot;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, pad_inches=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 论文技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核驱动模块试手</title>
      <link href="/posts/21889.html"/>
      <url>/posts/21889.html</url>
      
        <content type="html"><![CDATA[<p>本文写了一个非常简易的<strong>remap驱动</strong>，该驱动将捕获用户调用的mmap()，并<strong>修改</strong>其分配<strong>内存</strong>的<strong>映射关系</strong>：将对应虚拟地址映射到指定的物理地址。</p><h1 id="remap-c"><a href="#remap-c" class="headerlink" title="remap.c"></a>remap.c</h1><p>驱动模块源码，其中在remap_pfn_mmap函数中调用内核提供的函数remap_pfn_range来更改映射。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/export.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/scatterlist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/debugfs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/highmem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/dma-mapping.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/bitmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/mm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/task.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/list.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/etherdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSG <span class="string">&quot;read symbol&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* symbol;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">remap_pfn_mmap</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> vm_area_struct *vma)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_ALERT <span class="string">&quot;np_remap \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pfn,phy_addr;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> * private_data = (<span class="type">char</span> *)kzalloc(PAGE_SIZE, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (private_data == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(private_data, MSG);</span><br><span class="line">    printk(KERN_ALERT <span class="string">&quot;private_data: %s\n&quot;</span>,private_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(find_vma(current-&gt;mm,private_data)==<span class="literal">NULL</span>)</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;在内核中，private_data&#x27;s vm_area_struct is null\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(vma==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;vma==NULL\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    printk(KERN_ALERT <span class="string">&quot;vma: 0x%lx\n&quot;</span>,vma);</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;vm_start: 0x%lx\n&quot;</span>,vma-&gt;vm_start);</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;virt_to_phys: 0x%lx\n&quot;</span>,virt_to_phys(private_data));</span><br><span class="line">    <span class="type">int</span> len=vma-&gt;vm_end - vma-&gt;vm_start;</span><br><span class="line">    printk(KERN_ALERT <span class="string">&quot;len: %d\n&quot;</span>,len);</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;vm_page_prot: %d\n&quot;</span>,vma-&gt;vm_page_prot);</span><br><span class="line">    </span><br><span class="line">ret=remap_pfn_range( vma, vma-&gt;vm_start, virt_to_phys(private_data)&gt;&gt;PAGE_SHIFT,vma-&gt;vm_end - vma-&gt;vm_start, vma-&gt;vm_page_prot );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (ret)</span><br><span class="line">         printk(<span class="string">&quot;%s: remap_pfn_range failed at [0x%lx  0x%lx]\n&quot;</span>,</span><br><span class="line">             __func__, vma-&gt;vm_start, vma-&gt;vm_end);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         printk(KERN_ALERT <span class="string">&quot;remap addr:%s\n&quot;</span>, vma-&gt;vm_start);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">symbol_ptr_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user * ptr, <span class="type">size_t</span> count, <span class="type">loff_t</span> *ppos)</span>&#123;</span><br><span class="line">    ptr=symbol;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">remap_pfn_fops</span> =</span> &#123;</span><br><span class="line">     .owner = THIS_MODULE,</span><br><span class="line">     .mmap = remap_pfn_mmap,</span><br><span class="line">     .read = symbol_ptr_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">remap_pfn_misc</span> =</span> &#123;</span><br><span class="line">     .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">     .name = <span class="string">&quot;remap&quot;</span>,</span><br><span class="line">     .fops = &amp;remap_pfn_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">remap_pfn_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">     ret = misc_register(&amp;remap_pfn_misc);   <span class="comment">// 注册一个misc设备</span></span><br><span class="line">     <span class="keyword">if</span> (unlikely(ret)) &#123;</span><br><span class="line">         pr_err(<span class="string">&quot;failed to register misc device!\n&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> err:</span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">remap_pfn_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s,%d\r\n&quot;</span>, __func__, __LINE__);</span><br><span class="line">    misc_deregister(&amp;remap_pfn_misc);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(remap_pfn_init);</span><br><span class="line">module_exit(remap_pfn_exit);</span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h1><p>用户程序，使用自定义remap驱动小测试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;endian.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;byteswap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> PAGE_SIZE (4*1024)</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> BUF_SIZE getpagesize()</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> OFFSET (0)</span></span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> fd;</span><br><span class="line">     <span class="type">char</span> *addr = <span class="string">&quot;not null&quot;</span>;</span><br><span class="line">     fd = open(<span class="string">&quot;/dev/remap&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;mmap before==&gt;addr: %s\n&quot;</span>, addr);</span><br><span class="line">     addr = mmap(<span class="literal">NULL</span>, BUF_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_LOCKED, fd, OFFSET);   </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;mmap after==&gt;addr: %s\n&quot;</span>, addr); </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内核的源码路径, ?= 条件赋值, uname -r  得到内核的版本号</span></span><br><span class="line">KERNELDIR = /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成模块</span></span><br><span class="line">obj-m := remap.o </span><br><span class="line"> </span><br><span class="line"><span class="comment"># := 立即赋值, 得到当前的绝对路径</span></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># -C 切换工作路径, make -c</span></span><br><span class="line"><span class="section">modules:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"> </span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions Module* modules* *.mod</span><br><span class="line"> </span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: modules  clean</span></span><br></pre></td></tr></table></figure><h1 id="运行run"><a href="#运行run" class="headerlink" title="运行run!"></a>运行run!</h1><h3 id="加载驱动模块"><a href="#加载驱动模块" class="headerlink" title="加载驱动模块"></a>加载驱动模块</h3><p>ps: 上面三个文件需要在同一个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转root用户，在文件目录下</span></span><br><span class="line"><span class="comment"># 编译remap驱动源码</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将驱动模块加载到内核中</span></span><br><span class="line"><span class="comment"># 需要提前安装包：apt install module-init-tools</span></span><br><span class="line">insmod remap.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将驱动模块从内核中移除</span></span><br><span class="line">rmmod remap.ko</span><br></pre></td></tr></table></figure><h3 id="编译运行用户程序"><a href="#编译运行用户程序" class="headerlink" title="编译运行用户程序"></a>编译运行用户程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转root用户，在文件目录下</span></span><br><span class="line">gcc -o main main.c</span><br><span class="line">./main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RDMA基本服务类型</title>
      <link href="/posts/9078.html"/>
      <url>/posts/9078.html</url>
      
        <content type="html"><![CDATA[<p>🐱PS：</p><p>本文是对该博客（<a href="https://zhuanlan.zhihu.com/p/144099636">https://zhuanlan.zhihu.com/p/144099636</a>）的一个学习笔记。</p><p>若考虑使用哪种服务类型的QP，指路：<a href="https://www.rdmamojo.com/2013/06/01/which-queue-pair-type-to-use/">https://www.rdmamojo.com/2013/06/01/which-queue-pair-type-to-use/</a></p><h1 id="可靠服务"><a href="#可靠服务" class="headerlink" title="可靠服务"></a>可靠服务</h1><p>IB协议中是这样描述可靠服务的：可靠服务在发送和接受者之间保证了信息最多只会传递一次，并且能够保证其按照发送顺序被接收。</p><p>IB通过以下三个机制来保证可靠性：</p><ul><li>在IB协议的可靠服务类型中，使用了<strong>应答机制</strong>来保证数据包被对方收到。即接收端在接收到数据包后返回ACK。IB的可靠服务类型中，接收方不是每一个包都必须回复，也可以一次回复多个包的ACK。</li><li>IB协议使用CRC进行<strong>数据校验</strong>。发端会对Header和Payload（有效载荷，也就是真正要收发的数据）通过一定的算法得到一个校验值放到数据包的末尾。对端收到数据包后，也会用相同的算法计算出校验值，然后与数据包中的校验值比对，如果不一致，说明数据中包含错误（一般是链路问题导致的），那么接收端就会丢弃这个数据包。</li><li>IB协议中有PSN（Packet Sequence Number，包序号）进行<strong><strong>保序</strong></strong>，即每个包都有一个递增的编号。PSN可以用来检测是否丢包，比如收端收到了1，但是在没收到2的情况下就收到了3，那么其就会认为传输过程中发生了错误，之后会回复一个NAK给发端，让其重发丢失的包。<ul><li>PSN是每个QP都具有的，不同QP间是相互独立的。</li></ul></li></ul><blockquote><p>ICRC 校验发生在IB链路层, 而NAK是IB 传输层的功能。NAK会发生，但是发生在下一个packet (with no ICRC error)。比如，PSN为10的数据包在传输到响应方时出现了某种损坏，由于ICRC错误，响应方IB链路层将会丢弃该数据包。这时IB 传输层 会看到 PSN&#x3D;9 后面跟着 PSN&#x3D;11。PSN&#x3D;11 会触发IB传输层发起NAK。</p></blockquote><aside>💡 标准的IB规范不会等待重新排序。比如，PSN=2发生错误被丢弃，当PSN=3收到时，IB 传输层马上就会发起一个NAK（PSN=2），并不会花时间等2。</aside><aside>💡 CRC是硬件完成的，CPU不参与报文处理。对于Soft-RoCE和Soft-iWARP来说，它们的CRC校验只能由CPU来完成，这对性能影响很大。</aside><aside>💡 CRC保证的是单个报文的正确性，当底层将大数据进行拆包时，需要对每一个小包进行计算。</aside><h1 id="不可靠服务"><a href="#不可靠服务" class="headerlink" title="不可靠服务"></a>不可靠服务</h1><p>没有上述这些机制来保证数据包被正确的接收，属于“发出去就行，我不关心有没有被收到”的服务类型。</p><h1 id="基于连接的服务"><a href="#基于连接的服务" class="headerlink" title="基于连接的服务"></a>基于连接的服务</h1><p>每个QP都和另一个远端节点相关联。在这种情况下，QP Context（简称QPC）中包含有远端节点的QP信息。在建立通信的过程中，两个节点会交换包括稍后用于通信的QP在内的对端信息。<strong>在连接服务类型中的每个QP，都和唯一的另一个QP建立了连接，</strong>也就是说QP下发的每个WQE的目的地都是唯一的。</p><h1 id="基于数据报的服务"><a href="#基于数据报的服务" class="headerlink" title="基于数据报的服务"></a>基于<strong>数据报</strong>的服务</h1><p>与连接相反，发端和收端间不需要“建立管道”的步骤，只要发端到收端物理上是可以到达的，那么我就可能从任何路径发给任意的收端节点。</p><ul><li><p>IB协议对其的定义是这样的：</p><p>对于数据报服务来说，QP不会跟一个唯一的远端节点绑定，而是<strong>通过WQE来指定目的节点</strong>。和连接类型的服务一样，建立通信的过程也需要两端交换对端信息，但是数据报服务对于每个目的节点都需要执行一次这个交换过程。</p></li></ul><p>比如，在数据报类型的QP的Context中，不包含对端信息，即每个QP不跟另一个QP绑定。QP下发给硬件的<strong>每个WQE</strong>都可能<strong>指向不同的目的地</strong>。与连接服务类型一样，本端QP可以和哪个对端QP发送数据，是在准备阶段提前通过某些方式相互告知的。这也是上文“数据报服务对于每个目的节点都需要执行一次这个交换过程”的含义。</p><aside>💡 在基于连接的服务中，一对一连接需要存储更多的context或data以维持一对一连接状态，但数据报不需要存储那么多的数据。不过连接可以做到bypass CPU，但数据报不能bypass CPU。</aside><h1 id="RC"><a href="#RC" class="headerlink" title="RC"></a>RC</h1><p>基于连接的可靠服务，类比TCP&#x2F;IP协议栈传输层的TCP。</p><p>RC用于对数据完整性和可靠性要求较高的场景，跟TCP一样，因为需要各种机制来保证可靠，所以开销自然会大一些。</p><p>由于RC服务类型和每个节点间需要各自维护一个QP，假设有N个节点要相互通信，那么至少需要**N * (N - 1)**个QP，而QP和QPC本身是需要占用网卡资源或者内存的，当节点数很多时，存储资源消耗将会非常大。</p><h1 id="UC"><a href="#UC" class="headerlink" title="UC"></a>UC</h1><p>基于连接的不可靠服务。</p><ul><li><p>注意UC支持WRITE却不支持READ操作</p><blockquote><p>因为read需要请求端网卡保存上下文等信息（比如保存一些状态以等待某个发出去的READ返回数据），如果是不可靠的话，<strong>包丢失会造成网卡永久等待READ返回</strong>，这种行为不太符合常理，因此不可靠连接无法支持READ；</p></blockquote></li></ul><h1 id="RD"><a href="#RD" class="headerlink" title="RD"></a>RD</h1><p>基于数据报的可靠服务。各厂商选择实现是否支持该服务。</p><h1 id="UD"><a href="#UD" class="headerlink" title="UD"></a>UD</h1><p>基于数据报的不可靠服务，类比TCP&#x2F;IP协议栈传输层的UDP。</p><p>UD硬件开销小并且节省存储资源，比如N个节点需要相互通信，只需要创建<strong>N</strong>个QP就可以了，但是可靠性跟UDP一样没法保证。用户如果想基于UD服务类型实现可靠性，那么需要自己基于IB传输层实现应用层的可靠传输机制。</p><ul><li><p>注意UD不支持WRITE操作，只能用于SEND</p><blockquote><p>无论是可靠连接还是不可靠连接，都要求QP一对一连接（即文中的“建立管道”），也就是说READ和WRITE都需要一对一连接，但数据报无需一对一连接，因此没有一对一连接这个前提，所以无法支持WRITE</p></blockquote></li></ul><h1 id="各服务类型支持的操作"><a href="#各服务类型支持的操作" class="headerlink" title="各服务类型支持的操作"></a>各服务类型支持的操作</h1><p><img src="/img/4pic.png" alt="Untitled"></p><h1 id="一些问题及回答"><a href="#一些问题及回答" class="headerlink" title="一些问题及回答"></a>一些问题及回答</h1><p>如果一个qp占用了某udp src port，同一机器上的非rdma 的 udp程序还能用这个udp 源端口号吗？</p><blockquote><p>可以复用，IB规范对这个UDP Source Port没有做规定，一般是用这个域段做链路间的负载均衡。有的厂商通过驱动里做HASH得出一个值然后配到了硬件里，有的厂商甚至都没有做，估计是个随机值或者固定值。</p></blockquote><p>rdma中rc和ud能否拥有相同的qp number，网卡驱动根据qp type进行区分？</p><blockquote><p>不可以。这不止是修改驱动的问题，从API、整个RDMA软件栈和硬件实现来看，QP类型和QPN都是QP的固有属性之一，QP类型不同，调用API时传递的参数、软件栈的处理、QPC&#x2F;WQE的布局、硬件的处理都会有差异。虽然理论上可以这么搞，但是代价是破坏了一个成熟的标准，相当于自己重新定义了一种协议。</p></blockquote><p>RC和UD它们的具体应用场景是在哪里？</p><blockquote><p>RC用在对可靠性要求较高的场景，但是因为需要建立很多QP来维持进程间的连接，所以对内存的消耗很大。使用UD的话，每个进程只需要保留一个QP就可实现对整个组网内的其他进程通信，但是可靠性需要由上层保证。此外还有一种XRC服务，相比于RC可以节省通信所需的QP数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RDMA学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RDMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装linux内核教程</title>
      <link href="/posts/2366.html"/>
      <url>/posts/2366.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装所需依赖包</span></span><br><span class="line">sudo apt install build-essential libncurses5-dev fakeroot xz-utils</span><br><span class="line">sudo apt install flex libdaemon-dev libbison-dev libelf-dev</span><br><span class="line">sudo apt-get install libssl-dev</span><br><span class="line">sudo apt-get install dwarves</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去官网下载你想要安装的内核版本，然后解压到/lib/modules目录下</span></span><br><span class="line"><span class="built_in">cd</span> 内核源码文件夹</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建内核配置文件</span></span><br><span class="line">sudo make menuconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译内核源码</span></span><br><span class="line">sudo make -j16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内核模块安装</span></span><br><span class="line">sudo make modules_install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内核安装</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝原来的内核配置文件</span></span><br><span class="line">sudo <span class="built_in">cp</span> /boot/config-`<span class="built_in">uname</span> -r`* .config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置内核</span></span><br><span class="line">sudo make defconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译内核并安装</span></span><br><span class="line">sudo make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><blockquote><p>ps：方法一和方法二我都试过，可以成功安装</p></blockquote><p><strong>记录一下安装内核处理过的错误：</strong></p><p><a href="https://blog.csdn.net/m0_47696151/article/details/121574718">(111条消息) 编译内核报错 No rule to make target ‘debian&#x2F;canonical-certs.pem‘ 或 ‘canonical-revoked-certs.pem‘ 的解决方法_lylhw13_的博客-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo scripts/config --<span class="built_in">disable</span> SYSTEM_TRUSTED_KEYS</span><br><span class="line">sudo scripts/config --<span class="built_in">disable</span> SYSTEM_REVOCATION_KEYS</span><br><span class="line">sudo make <span class="comment"># sudo make V=1 all</span></span><br></pre></td></tr></table></figure><p><strong>参考</strong>：</p><p><a href="https://blog.csdn.net/SweeNeil/article/details/83684565">https://blog.csdn.net/SweeNeil/article/details/83684565</a><br><a href="https://blog.csdn.net/qq_42793254/article/details/103074998">https://blog.csdn.net/qq_42793254/article/details/103074998</a></p><h1 id="切换内核版本"><a href="#切换内核版本" class="headerlink" title="切换内核版本"></a>切换内核版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可用内核信息</span></span><br><span class="line">grep menuentry /boot/grub/grub.cfg </span><br><span class="line"></span><br><span class="line">sudo vim /etc/default/grub</span><br><span class="line"><span class="comment"># 写入GRUB_DEFAULT=&quot;Advanced options for Ubuntu &gt; Ubuntu, with Linux 4.18.0-18-generic&quot;</span></span><br><span class="line"><span class="comment"># 其中Linux 4.18.0-18-generic为你想切换到的版本</span></span><br><span class="line"></span><br><span class="line">sudo update-grub </span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启电脑 </span></span><br><span class="line">sudo reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前内核版本</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目toktik环境搭建</title>
      <link href="/posts/9673.html"/>
      <url>/posts/9673.html</url>
      
        <content type="html"><![CDATA[<p>项目地址🎶：<a href="https://github.com/Toktik-Team/toktik/blob/main/README_zh-CN.md">https://github.com/Toktik-Team/toktik/blob/main/README_zh-CN.md</a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>ubuntu18.04  | 内核版本：Linux5.15.1</p><h1 id="linux下安装go1-19"><a href="#linux下安装go1-19" class="headerlink" title="linux下安装go1.19"></a>linux下安装go1.19</h1><p>注意：该项目不支持go1.21.0版本！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/usr/local目录下载安装包 </span></span><br><span class="line">sudo wget https://go.dev/dl/go1.19.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 在/usr/local目录下进行解压</span></span><br><span class="line">sudo tar -C /usr/local -xzf go1.19.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">vim ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在profile文件中添加代理和环境变量</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/app/go </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装项目所需包</span></span><br><span class="line">go install github.com/cloudwego/kitex/tool/cmd/kitex@latest</span><br><span class="line">go install github.com/cloudwego/thriftgo@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">kitex --versio</span><br><span class="line">thriftgo --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="linux下安装FFmpeg"><a href="#linux下安装FFmpeg" class="headerlink" title="linux下安装FFmpeg"></a>linux下安装FFmpeg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install FFmpeg</span><br></pre></td></tr></table></figure><h1 id="linux下安装PostgreSQL"><a href="#linux下安装PostgreSQL" class="headerlink" title="linux下安装PostgreSQL"></a>linux下安装PostgreSQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql</span><br></pre></td></tr></table></figure><h1 id="linux下安装Redis"><a href="#linux下安装Redis" class="headerlink" title="linux下安装Redis"></a>linux下安装Redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><h1 id="linux下安装OpenTelemetry-Collector"><a href="#linux下安装OpenTelemetry-Collector" class="headerlink" title="linux下安装OpenTelemetry Collector"></a>linux下安装OpenTelemetry Collector</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.84.0/otelcol_0.84.0_linux_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i otelcol_0.84.0_linux_amd64.deb</span><br><span class="line"></span><br><span class="line">./ocb_0.44.0_linux_amd64 --config=<span class="string">&quot;./otel-config.yaml&quot;</span></span><br></pre></td></tr></table></figure><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装其它依赖包</span></span><br><span class="line">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavutil-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建所有服务</span></span><br><span class="line"><span class="built_in">cd</span> toktik</span><br><span class="line">sudo ./build-all.sh</span><br></pre></td></tr></table></figure><p>然后就可以运行项目啦~</p>]]></content>
      
      
      <categories>
          
          <category> 研一调研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux内存管理模块一些函数介绍</title>
      <link href="/posts/35092.html"/>
      <url>/posts/35092.html</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>本文介绍了internal_get_user_pages_fast、gup_pgd_range、gup_pte_range、try_grab_compound_head</p><h1 id="internal-get-user-pages-fast"><a href="#internal-get-user-pages-fast" class="headerlink" title="internal_get_user_pages_fast"></a>internal_get_user_pages_fast</h1><p>这是一个用于获取用户空间页面的函数，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">internal_get_user_pages_fast</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> start, <span class="type">int</span> nr_pages,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">int</span> gup_flags,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> page **pages)</span></span><br></pre></td></tr></table></figure><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ul><li><code>start</code>：要获取的用户空间起始地址。</li><li><code>nr_pages</code>：要获取的页面数量。</li><li><code>gup_flags</code>：用于指定页面特性和行为的标志。</li><li><code>pages</code>：指向一个<code>struct page</code>指针的数组，存储获取到的页面的指针。</li></ul><p>函数返回获取到的页面数量，或者在出错时返回负的错误代码。</p><h3 id="函数的主要步骤如下："><a href="#函数的主要步骤如下：" class="headerlink" title="函数的主要步骤如下："></a>函数的主要步骤如下：</h3><ol><li>进行参数检查，确保传入的<code>gup_flags</code>是合法的组合。</li><li>如果设置了<code>FOLL_PIN</code>标记，将当前进程的内存管理结构中的<code>has_pinned</code>原子变量设为1。</li><li>如果没有设置<code>FOLL_FAST_ONLY</code>标记，使用<code>might_lock_read</code>宏提示可能会对<code>mmap_lock</code>读锁进行加锁。</li><li>计算起始地址、结束地址和地址范围长度，确保它们是有效的。</li><li>禁用中断，阻止页面表页面在操作期间被释放。</li><li>如果启用了<code>CONFIG_HAVE_FAST_GUP</code>配置，并且允许快速GUP（Get User Pages）操作，则调用<code>gup_pgd_range</code>函数获取页面，将获取到的页面数量存储在<code>nr_pinned</code>变量中。</li><li>如果没有获取到所有请求的页面并且没有设置<code>FOLL_FAST_ONLY</code>标记，则尝试使用<code>__gup_longterm_unlocked</code>函数获取剩余的页面。</li><li>根据已获取页面的数量和剩余页面尝试的结果，返回最终结果。</li></ol><p>这个函数的主要作用是尝试使用快速GUP（Get User Pages）方法获取用户空间内存页面。如果快速方法不能获取所有请求的页面，它还可以尝试使用其他方法获取剩余的页面。这个函数会在访问用户空间内存时使用，例如在内核处理用户请求时。</p><h1 id="gup-pgd-range"><a href="#gup-pgd-range" class="headerlink" title="gup_pgd_range"></a>gup_pgd_range</h1><p>这是一个分析页全局目录（PGD）范围的函数，用于将虚拟地址范围映射到物理内存页面。这个函数被定义为 <code>static void gup_pgd_range</code>，它接收以下参数：</p><ol><li><code>unsigned long addr</code>：起始虚拟地址。</li><li><code>unsigned long end</code>：结束虚拟地址。</li><li><code>unsigned int flags</code>：标志，用于指定处理方式。</li><li><code>struct page **pages</code>：指向页面结构数组的指针。</li><li><code>int *nr</code>：指向存储当前已处理页面数量的整数的指针。</li></ol><p>函数首先通过调用 <code>pgd_offset(current-&gt;mm, addr)</code> 获取当前进程内存管理结构（<code>current-&gt;mm</code>）对应的页全局目录项指针 <code>pgdp</code>。接下来，它使用一个 <code>do-while</code> 循环遍历从 <code>addr</code> 到 <code>end</code> 的虚拟地址范围。</p><p>在循环中，首先获取当前 <code>pgdp</code> 指向的页全局目录项 <code>pgd</code>。然后调用 <code>pgd_addr_end(addr, end)</code> 计算下一个虚拟地址段的结束地址，存储在 <code>next</code> 变量中。</p><p>接下来，函数检查当前 <code>pgd</code> 是否为空（<code>pgd_none(pgd)</code>）。如果为空，函数直接返回。</p><p>如果当前 <code>pgd</code> 是一个巨大的页表项（<code>pgd_huge(pgd)</code>），函数调用 <code>gup_huge_pgd</code> 处理巨大页表项。否则，如果当前 <code>pgd</code> 是一个巨大页表目录（<code>is_hugepd(__hugepd(pgd_val(pgd)))</code>），函数调用 <code>gup_huge_pd</code> 处理巨大页表目录。最后，如果都不是上述情况，函数调用 <code>gup_p4d_range</code> 处理下一级页表。</p><p>在任何情况下，如果处理失败（返回值为 0），函数立即返回。否则，在循环条件中更新 <code>pgdp</code>、<code>addr</code> 和 <code>next</code>，并继续遍历虚拟地址范围。</p><p>总的来说，这个函数遍历虚拟地址范围，查找并处理与虚拟地址对应的物理内存页面。根据不同的页表项类型（巨大页表项、巨大页表目录等），它会调用不同的函数来处理这些项。</p><h1 id="gup-pte-range"><a href="#gup-pte-range" class="headerlink" title="gup_pte_range"></a>gup_pte_range</h1><p>这段代码实现了一个函数 <code>gup_pte_range()</code>，用于获取一个虚拟地址范围内的物理页框，并返回这些页框所对应的 <code>struct page</code> 数组和页框数量。下面是对这段代码的分析：</p><ol><li>首先定义了一些变量，包括 <code>pgmap</code>、<code>nr_start</code> 和 <code>ret</code> 等。其中 <code>pgmap</code> 是一个指向 <code>dev_pagemap</code> 结构体的指针，用于映射设备内存。<code>nr_start</code> 表示获取页框的起始数量，<code>ret</code> 表示函数的返回值。</li><li>然后通过 <code>pte_offset_map()</code> 函数获取一个 <code>pte_t</code> 类型的指针 <code>ptep</code>，该指针指向一个页表项（<code>pte</code>）的地址。同时将 <code>ptep</code> 赋值给 <code>ptem</code>，作为循环中的初始值。</li><li>使用一个 <code>do-while</code> 循环，遍历地址范围内的所有页表项。循环内部对每个页表项进行处理，具体操作如下：</li></ol><ul><li>使用 <code>gup_get_pte()</code> 函数获取页表项的值，并赋值给 <code>pte</code> 变量。</li><li>如果 <code>pte</code> 的保护位（protnone）被设置，说明这个页表项不可访问，直接跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>如果 <code>flags</code> 中包含 FOLL_WRITE 标志位，但 <code>pte</code> 中的写入权限被禁用，则也跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>如果 <code>pte</code> 是设备映射页，则进一步处理。如果 <code>flags</code> 中包含 FOLL_LONGTERM 标志位，则也跳转到 <code>pte_unmap</code> 标签处清理页面映射。否则，调用 <code>get_dev_pagemap()</code> 函数获取设备映射的 <code>dev_pagemap</code> 结构体，并将其赋值给 <code>pgmap</code> 变量。如果获取失败，则跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>如果 <code>pte</code> 是一个特殊页，则也跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>检查 <code>pte</code> 所对应的物理页框是否有效，如果无效则会触发 BUG，程序会停止运行。</li><li>调用 <code>pte_page()</code> 函数获取 <code>pte</code> 所对应的 <code>struct page</code> 结构体，并将其赋值给 <code>page</code> 变量。</li><li>如果 <code>page</code> 是一个复合页，则调用 <code>try_grab_compound_head()</code> 函数获取该页的头部页框，并将其赋值给 <code>head</code> 变量。如果获取失败，则跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>检查 <code>pte</code> 的值是否与 <code>ptep</code> 的值相等，如果不相等，则说明页表项已经被修改过，直接跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>检查 <code>compound_head(page)</code> 是否等于 <code>head</code>，如果不等于，则说明 <code>page</code> 不是一个有效的复合页，直接触发 BUG，程序会停止运行。</li><li>如果 <code>flags</code> 中包含 FOLL_PIN 标志位，则调用 <code>arch_make_page_accessible()</code> 函数使 <code>page</code> 可访问。如果操作失败，则调用 <code>unpin_user_page()</code> 函数解除页面锁定，并跳转到 <code>pte_unmap</code> 标签处清理页面映射。</li><li>调用 <code>SetPageReferenced()</code> 函数标记 <code>page</code> 已被引用过。</li><li>将 <code>page</code> 存储到 <code>pages</code> 数组中，并将 <code>nr</code> 的值增加 1。</li></ul><ol><li>循环结束后，如果函数没有被跳转到 <code>pte_unmap</code> 标签处，则将 <code>ret</code> 的值设为 1，表示函数执行成功。然后调用 <code>put_dev_pagemap()</code> 函数释放 <code>pgmap</code> 占用的资源，并调用 <code>pte_unmap()</code> 函数解除页面映射。</li><li>最后返回 <code>ret</code> 的值，表示函数执行结果的状态。</li></ol><h1 id="try-grab-compound-head"><a href="#try-grab-compound-head" class="headerlink" title="try_grab_compound_head"></a>try_grab_compound_head</h1><p>它的作用是尝试根据标志位(flags)增加一个给定页面（page）的引用计数。在此文件中，“grab”表示：根据标志位决定是使用FOLL_PIN还是FOLL_GET行为来增加页面的引用计数。</p><p>函数的参数如下：</p><ul><li><code>struct page *page</code>：要操作的页面。</li><li><code>int refs</code>：当前页面的引用计数。</li><li><code>unsigned int flags</code>：控制行为的标志位，包括FOLL_GET和FOLL_PIN。</li></ul><p>在这个函数中，FOLL_GET和FOLL_PIN（或者它们都没有）必须被设置，但不能同时设置。它们的含义如下：</p><ul><li>FOLL_GET：页面的引用计数将增加1。</li><li>FOLL_PIN：页面的引用计数将增加GUP_PIN_COUNTING_BIAS。</li></ul><p>根据flags的设置，函数会返回适当增加引用计数的头页面（head page），如果失败则返回NULL。如果没有设置FOLL_GET或FOLL_PIN，那么这被认为是失败，同时也可能是调用者的bug，因此还会发出警告。</p><p>函数的主体包含几个条件分支：</p><ol><li>如果设置了FOLL_GET，调用<code>try_get_compound_head</code>函数，参数为<code>page</code>和<code>refs</code>。</li><li>如果设置了FOLL_PIN，进行以下操作：<ul><li>检查是否同时设置了FOLL_LONGTERM，并且页面是CMA类型，如果是，则返回NULL。</li><li>如果页面的order大于1（由<code>hpage_pincount_available</code>函数检查），则将<code>refs</code>乘以GUP_PIN_COUNTING_BIAS。</li><li>调用<code>try_get_compound_head</code>函数，参数为<code>page</code>和<code>refs</code>。</li><li>如果页面的order大于1，调用<code>hpage_pincount_add</code>函数增加页面的pin计数。</li><li>更新节点状态（<code>mod_node_page_state</code>）。</li><li>返回适当增加引用计数的头页面。</li></ul></li><li>如果既没有设置FOLL_GET，也没有设置FOLL_PIN，发出警告，并返回NULL。</li></ol><h1 id="try-get-compound-head"><a href="#try-get-compound-head" class="headerlink" title="try_get_compound_head"></a>try_get_compound_head</h1><p>这是一个静态内联函数，返回一个<code>struct page</code>类型的指针，并接受两个参数：</p><ol><li><code>struct page *page</code> - 一个指向<code>struct page</code>类型的指针，表示我们要获取其头部的复合页。</li><li><code>int refs</code> - 一个整数，表示我们希望增加的引用计数。</li></ol><p><code>try_get_compound_head()</code>函数的目的是获取复合页的头部，并将其引用计数适当地增加。如果成功，函数返回头部的指针，否则返回<code>NULL</code>。</p>]]></content>
      
      
      <categories>
          
          <category> linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
